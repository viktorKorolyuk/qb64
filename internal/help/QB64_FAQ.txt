{| align="center"
  | __TOC__
  |}


As with everything else, this list will be updated to correspond to new progress of QB64 so make sure that you are using the latest version of '''QB64 (version 1.1 released in 1/20/17)'''. Please note that it may take a short time to update this list.


&lt;center>'''You may need Administrator rights to install or use QB64!'''&lt;/center>

&lt;center>'''{{text|It's a good idea to exclude "QB64.exe" (also the internal folder) from any real-time anti-virus scanning to prevent IDE Module Errors!|red}}'''&lt;/center>


==Q: What is QB64?==

A: '''QB64''' is a BASIC compatible Editor and C++ compiler that creates working Executable files from Qbasic BAS files that can be run on 32 or 64 bit PC's using '''WINDOWS'''(XP, Vista and newer), '''LINUX''' or '''macOS'''. The goal is to be 100% compatible with QuickBasic 4.5 plus add hundreds of new abilities such as program icons and custom sized windows and a great [[IDE|Editor]] with a new Help Menu. 


The '''new keywords''' add some '''new features''' such as playing '''music or sound''' files and instant access to '''32 bit graphics''' file images. Also '''TCP/IP''' internet communication is available to '''download''' files, '''email''' messages over the web or play '''internet games'''. '''DLL Libraries''' can add more programming options and QB64 can access all of the new USB gaming '''controllers''' and '''printers'''.


QB is an abbreviation for '''QBasic''' or '''QuickBASIC''' which is an easy to learn language that grew very popular in the 90's. It uses simple syntax but holds great potential as there are methods to achieve nearly anything. '''QBasic is NOT DEAD thanks to QB64!'''


&lt;p style="text-align: center">[[Keywords currently not supported by QB64]]&lt;/p>


&lt;center>'''You may need Administrator rights to install or use QB64!'''&lt;/center>

==Q: Does it have modern features? Do they HAVE to be used?==

A: QB64 has PLENTY of modern features, but they do not have to be used. You may just want to run some of your old favorites.
&lt;center>'''QB64 was created to run your old Qbasic 4.5(or less) programs on newer Operating Systems without ANY changes!'''&lt;/center>
You could code using the original QuickBASIC syntax all the way through and it should work as you expect it to or even better. QB64 is often faster and has none of the memory limitations that plagued Qbasic in the past! Give it try! See for yourself.

&lt;center> '''For incompatibility issues you can look in the QB64 "Discussion" board here:'''&lt;/center>


&lt;center>[http://www.qb64.net/forum/index.php Visit the QB64 Community Forum]&lt;/center>


&lt;center>'''Some members can still run QB4.5 programs so we can test problem code!'''&lt;/center>
&lt;center>QB 4.5 code only! QB64 was not meant to run PDS (7.1) QBX code. Will run most GW Basic code too!&lt;/center>

 
&lt;center>'''If your program(s) don't work correctly(check your code first) please feel free to post in the "Discussion" board.'''&lt;/center> 

Galleon is constantly working on pure compatibility. You don't have to set it up differently to use the modern features as they are made to work alongside original QB code seamlessly (unlike FreeBASIC and any other modern BASIC out there). The modern statements are designed to go along with the BASIC philosophy and expand Qbasic into the future!


&lt;center>'''QB64 FEATURES INCLUDE...'''&lt;/center>
{{TextStart}}

  1) Full graphic functions for [[_NEWIMAGE|images]] up to 32 bit color. [[_ALPHA|Alpha]] transparency supported.

  2) Instant [[_LOADIMAGE|loading]] of image files including BMP, PNG, JPEG, GIF and more...

  3) Supports [[_SNDOPEN|stereo sound]] files like WAV, OGG, MP3, speaker and volume control and more...

  4) Animation is easy to do using [[_DISPLAY]] instead of page flipping. NO SCREEN FLICKER!

  5) [[_CLIPBOARD$|Clipboard]] reading and writing support.

  6) Networking over [[TCP/IP Message Format]] and Email.

  7) True type [[_FONT|font]] and [[Unicode]] support for many Languages.

  8) Integrated [[_MOUSEINPUT|mouse]] and [[_DEVICES|game controller]] input including [[_MOUSEWHEEL|scroll wheel]] support.

  9) Support for C++, OpenGL, Windows API and other custom Dynamic Link [[Libraries]].
{{TextEnd}}

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How do I install QB64 on Windows, Linux, macOS?==

A: If you have a relatively new computer you will probably be fine. QB64 supports the following Operating Systems in one download:


&lt;center>'''Windows NT(XP), Windows Vista, Windows 7, 8 or 10:'''&lt;/center>
:'''1)''' Click the following link and Windows box to download QB64: [http://www.qb64.net QB64 Windows Downloads]
:'''2)''' Unzip to any folder path you wish. The ZIP file will create a ''QB64'' folder for the program files. 

:* Executable programs are portable between like systems by copying the stand-alone executable file.
:* ''Versions of QB64 prior to 1.000 require that your binary is distributed with the DLL files that came bundled.''
&lt;center>'''You may need Administrator rights to install or use QB64.'''&lt;/center>


&lt;center>'''Windows 2000 running QB64 versions .94 and Above'''&lt;/center>
: QB64 version .940 and above contain a full version of the Ming Compiler! This may create an entry point error in Windows 2K.

:'''1)''' Click the following link and Windows box to download QB64: [http://www.qb64.net QB64 Windows Downloads]
:'''2)''' Unzip to any folder path you wish. The ZIP file will create a ''QB64'' folder for the program files. Check for ''MSVCRT.DLL'' errors!
:'''3)''' If there is an error, unzip the contents of the ZIP FIX file into the QB64 folder after QB64 has updated to the latest version.

&lt;center>[http://www.qbasicnews.com/dav/files/qb64v942-win2k-fix.zip Download ZIP FIX for Windows 2000 if QB64 does not run correctly!]&lt;/center>
&lt;center>This download fix will be updated when necessary by Dav&lt;/center>


----
&lt;center>'''Most versions of LINUX 32 and 64 bit'''&lt;/center>
:'''1)''' Click on the following link and Linux box to download QB64: [http://www.qb64.net QB64 Linux Downloads]
:'''2)'''  You will need the following installed: OpenGL developement libraries, ALSA development libraries, GNU C++ Compiler (g++)
:'''3)''' After extracting the downloaded package, run the installation batch/script called ''setup_lnx.sh'' in the main ''qb64'' folder to setup QB64.
:'''4)''' It is not advisable to install QB64 as root.

&lt;center>Executable programs are portable between like systems by copying the executable file.&lt;/center>
&lt;center>'''The Linux 32bit &amp; 64bit versions are combined as of the v 0.925 update'''&lt;/center>
&lt;center>'''Note: Some QB64 keywords and procedures are not available as of this Linux release.'''&lt;/center>               


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

----
&lt;center>'''macOS'''&lt;/center>
:'''1)''' You MUST install '''Xcode command line tools''' for C++ compilation from their website. In a terminal window, type the following command: '''xcode-select --install''' (more info here: [http://developer.apple.com/technologies/tools/xcode.html Xcode download])
:     (you won't be using the Xcode interface, QB64 just needs to have access to the C++ compiler it installs)
:'''3)''' Click on the following link and MAC OSX box to download QB64 for macOS: [http://www.qb64.net QB64 MAC OSX Downloads]
:     Extract the downloaded package and run ''setup_osx.command'', found within the QB64 folder to install the QB64 compiler.

&lt;center>'''After installation you should run '''qb64_start_osx.command''' to run qb64.'''&lt;/center>

:* Executable programs are portable between like OSX systems by copying the executable file.
:* To help launch executables without a console, a file called ''programname_start.command'' is created along with the program.
&lt;center>'''Note: Some QB64 keywords and procedures are not available as of this MAC release.'''&lt;/center>


&lt;center>[[Keywords_currently_not_supported_by_QB64#Keywords_Not_Supported_in_Linux_or_MAC_OSX_versions|Keywords Not Supported in Linux or MAC OSX versions]]&lt;/center>


----
&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q:The setup scripts don't work in Linux and macOS. How can I fix them?==
A: If you have problems running the install scripts under Linux (./setup_lnx.sh) or macOS (./setup_osx.command), run the following line in terminal, from your QB64 folder:

===Linux===
* &lt;nowiki>find . -name '*.sh' -exec sed -i "s/\r//g" {} \;&lt;/nowiki>

===macOS===
* &lt;nowiki>find . -name '*.command' -exec perl -pi -e 's/\r\n|\n|\r/\n/g' {} \;&lt;/nowiki>
* Don't forget you need to have Xcode command line utilites installed to use QB64.

If you have any other issues, check out the Forum:

* [http://www.qb64.net/forum/ QB64 Forum]
* [http://www.qb64.net/forum/index.php?topic=13359.msg115525#msg115525 Fixing setup scripts]

==Q: How do I upgrade the 32 bit Windows version of QB64 to 64 bit functionality?==
A: The process has been simplified a lot recently.

# Download the version of QB64 which you want to transform into a 64-bit version from THE QB64 OFFICIAL WEBSITE.
# Grab a pre-edited copy of the 64-bit mingw compiler. You can find it here, [https://www.dropbox.com/s/gapnz7m22yc0mlv/QB64%2064-bit%20mingw%20compiler%20%2808-01-2017%29%20PRE-EDITED.7z?dl=0 QB64 64-bit mingw compiler (08-01-2017) PRE-EDITED], stored permanently in [[User:SMcNeill |Steve McNeill]]'s Dropbox account.
# Extract the QB64 file wherever you want it to be on your system.
# Go into the folder where you installed QB64 and head to the '''internal/c/c_compiler''' folder.
# Delete everyone of those files and folders.
# Extract the mingw 64-bit compiler into that folder. You're looking to replace the old contents with the new contents. Watch for nesting a folder inside a folder by accident.
# Go into the main QB64 directory, look for setup_win.bat. If it's not there, grab the download for it from below and put it into the main folder. (I don't think the archives at qb64.net has the file included in it, though if you download from the repo directly, you can find it. It's kind of a developer tool, moreso than something an user needs cluttering up their directory structure.)
# Run that setup_win.bat file. If everything is extracted to the proper places, you should build and have a version of QB64 open up where the title screen now reads "QB64x64". Congrats!! You now have a working, 64-bit version of QB64.

That's all it takes! 

{{small|Tip courtesy of Steve McNeill}}


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Why won't QB64 work on my computer?==
QB64 currently supports Windows versions from XP to the latest version. Most Linux and macOS versions are also supported.


&lt;center>'''Don't move QB64 executable out of the QB64 folder! The various sub-folders hold the C++ compiler files!'''&lt;/center>
&lt;center>Versions of QB64 prior to 1.000 require the accompanying DLL files, which may be copied into the Windows ''System32'' or ''SysWOW64'' folder for program access outside of the QB64 folder. They can also be placed in a separate folder or download package with the EXE and program files.&lt;/center>


Does your Windows system have another version of the '''MinGW''' compiler? Does it have '''Fortran''' or '''GFortran'''? You can check your environmental values using the following batch file which will create the '''''settings.inf''''' text file in the batch folder:

{{TextStart}}set >settings.inf '' '' {{TextEnd}}


: The '''settings.inf''' file should hold environmental values similar to those listed below:
{{TextStart}}ALLUSERSPROFILE=C:\Documents and Settings\All Users.WINDOWS
APPDATA=C:\Documents and Settings\User1\Application Data
CLIENTNAME=Console
CommonProgramFiles=C:\Program Files\Common Files
COMPUTERNAME=PC1
ComSpec=C:\WINDOWS\system32\cmd.exe
FP_NO_HOST_CHECK=NO
HOMEDRIVE=C:
HOMEPATH=\Documents and Settings\User1
'''LIBRARY_PATH={{text|\F\G77\Llib|red}}'''
LOGONSERVER=\\PC1
NUMBER_OF_PROCESSORS=1
4000

OS=Windows_NT
'''Path=C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;{{text|\F\G77\bin|red}}'''
PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH
PROCESSOR_ARCHITECTURE=x86
PROCESSOR_IDENTIFIER=x86 Family 15 Model 1 Stepping 2, GenuineIntel
PROCESSOR_LEVEL=15
PROCESSOR_REVISION=0102
ProgramFiles=C:\Program Files
PROMPT=$P$G
SESSIONNAME=Console
SystemDrive=C:
SystemRoot=C:\WINDOWS
TEMP=C:\DOCUME~1\User1\LOCALS~1\Temp
TMP=C:\DOCUME~1\User1\LOCALS~1\Temp
{{TextEnd}}
: Environmental values in {{text|red|red}} above indicate where another C compiler has altered or added to the Windows settings. 


&lt;center>Environmental values to check and possibly clear are '''PATH=''', '''LIBRARY_PATH=''', '''LIB=''' or '''CPLUS_INCLUDE_PATH='''&lt;/center>


&lt;center>'''QB64 does NOT alter computer settings! All required files are organized in the QB64 folder.'''&lt;/center>


: Try to run the following '''''TestQB64.bat''''' batch file from the QB64 folder only:
{{TextStart}}@echo off
REM set environmental values for QB64. Remove offending program paths from the values.
set Path=C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem
set LIBRARY_PATH=
REM start QB64 IDE. A BAS file can be dropped into this batch file to edit in IDE.
REM this batch file must be run from the QB64 folder!
Set QB64=%~dp0
CD "%QB64%"
start qb64.exe %1 '' ''
{{TextEnd}}
{{small|Adapted from code by Michael Calkins}}
: 64 bit systems should use the ''PATH=C:\WINDOWS\[[SysWOW64]]'' folder in place of the ''C:\WINDOWS\system32'' parameter.


: If the batch file works, you can use it to edit and compile QB64 programs. You may want to uninstall the conflicting program.


&lt;center>'''[[IDE#Compiler_Errors|IDE Compiler Errors]]&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Are there any known incompatibilities?==

A: There are some things that QB64 will not and NEVER was intended to do! The original concept was and is to provide a platform that allows older and NEW QBasic procedures and programs to run on the newer 32 and 64 bit personal computers. As you may have observed, this compatibility alone limits the access programs now have to DOS. 

'''[[DOS]] is not fully supported''', as this will require full DOS support to be emulated, however it will continually be updated to support more source code and more features, memory addresses, ports, etc. so that it always approaches 100%. If you don't use too many [[ABSOLUTE]], [[INTERRUPT]], [[PEEK]], [[POKE]] and [[OUT]] statements you probably won't notice any difference between QB 4.5 and QB64 (and if you do, report it as a bug in the forums, remember to check if the problem has been reported before please!), you can expect the most common addresses for interrupts, etc. to be functioning. Galleon has also received a comprehensive list of memory and port addresses so that even some less common addresses may work as well. If you are unsure, try them!


&lt;p style="text-align: center">[[Keywords currently not supported by QB64]]&lt;/p>


'''Watch the CPU usage!''' QB64 is a lot faster than QBasic was and it does not have many of the size limitations that confined QBasic programming abilities. Having said that, '''care must be taken to assure that programs do not HOG resources!''' To do that, use speed limits when possible to keep the resources used to a minimum. '''Monitor Task Manager!''' It can tell you how much resources are being used in different parts of a program. The following keywords can lower the impact of your programs on those resources by releasing them to other programs:

:::::* [[_LIMIT]]: Limits the loops per second in ANY loop and thus lowers the overall CPU usage.

:::::* [[_DELAY]]: Pauses a procedure and releases unused resources for other programs.

:::::* [[SLEEP]]: Stops or delays program procedures and shares resources.

:::::* [[INPUT]] and [[INPUT$]] stop program procedures until an entry or key press is given.


QB64 can be fast when you need it to be, but take the time to consider the impact of your program on other programs as people SELDOM have only ONE program running and the OS has tasks it MUST do too! The following programs have KNOWN issues with high CPU usage:


&lt;center>'''[http://forums.winamp.com/showthread.php?threadid=166479 WINAMP (intermittent sound)]'''&lt;/center>


&lt;center>'''Thank you for your support and happy programming!'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Why won't my QB64 compiled programs run in folders other than the QB64 folder?==

A: Versions of QB64 prior to 1.000 required certain DLL files to be in the program folder or in the Windows system path.


&lt;center>{{Text|C:\WINDOWS\SYSTEM32|green}}&lt;/center>


Copy each of the DLL files included with QB64 to the System32 or [[SysWOW64]] folder. You may need administrator rights to do this!


&lt;center>[http://www.samlogic.net/articles/32-64-bit-windows-folder-x86-syswow64.htm SysWOW64 and Program Files(x86) folders on 64 bit Windows OS.]&lt;/center>


&lt;center>'''[[QB64_FAQ#Q:_What_files_are_required_to_run_QB64_SDL_programs_in_Windows.3F|List of required QB64 DLL files for older versions (prior to 1.000)]]'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How do I find the current QB64 program path in Windows or Linux?==

* With the [[_CWD$]] and [[_STARTDIR$]] commands you can get the current working path and the path from which your program was started, respectively. For older versions of QB64 in which these statements may not be available, use the procedures below.


:'''Windows path:'''
{{CodeStart}} '' ''
{{Cl|PRINT}} PATH$
{{Cl|END}}

{{Cl|FUNCTION}} PATH$ ' Get Current Directory
'Get path to executable in Windows
{{Cl|DECLARE LIBRARY}} 'Directory Information using KERNEL32 provided by Dav
  {{Cl|FUNCTION}} GetModuleFileNameA ({{Cl|BYVAL}} Module {{Cl|AS}} {{Cl|LONG}}, FileName {{Cl|AS}} {{Cl|STRING}}, {{Cl|BYVAL}} nSize {{Cl|AS}} {{Cl|LONG}})
{{Cl|DECLARE LIBRARY|END DECLARE}}

FileName$ = {{Cl|SPACE$}}(400) ' Sometimes 256 characters for a full path name is not enough

Result = GetModuleFileNameA(0, FileName$, {{Cl|LEN}}(FileName$)) '0 designates the current program
{{Cl|IF...THEN|IF}} Result {{Cl|THEN}} 'Result returns the length or bytes of the string information
  PATH$ = {{Cl|LEFT$}}(FileName$, Result)
  start = 1
  DO
    posit = {{Cl|INSTR}}(start, PATH$, "\")
    {{Cl|IF...THEN|IF}} posit {{Cl|THEN}} last = posit
    start = posit + 1
  {{Cl|LOOP}} {{Cl|UNTIL}} posit = 0
  PATH$ = {{Cl|LEFT$}}(PATH$, last)
{{Cl|ELSE}}
  PATH$ = ""
{{Cl|END IF}}
FileName$ = ""
{{Cl|END FUNCTION}} '' ''
{{CodeEnd}}{{small| Code by EricR}}


:'''Linux path:'''
{{CodeStart}} '' ''
{{Cl|PRINT}} path$
{{Cl|END}}

{{Cl|FUNCTION}} path$
'Get path to executable and directory of said executable on Linux
'Public Domain code
{{Cl|DECLARE LIBRARY}}
    {{Cl|FUNCTION}} readlink&amp; (path$, buffer$, {{Cl|BYVAL}} bufsize&amp;)
{{Cl|DECLARE LIBRARY|END DECLARE}}

bufsize&amp; = 500 'Initial size of the string to store the result in
DO
    buffer$ = {{Cl|SPACE$}}(bufsize&amp;) 'Create the buffer to put result in
    ret&amp; = readlink&amp;("/proc/self/exe", buffer$, bufsize&amp;) '/proc/self/exe is always a symlink to our executable file
    {{Cl|IF...THEN|IF}} ret&amp; &lt; bufsize&amp; {{Cl|THEN}} {{Cl|EXIT DO}} 'ret&amp; is how many bytes were actually put in the buffer. If they are equal, we need to make the buffer bigger and try again
    bufsize&amp; = bufsize&amp; + 500
{{Cl|LOOP}}
exe$ = {{Cl|LEFT$}}(buffer$, ret&amp;)
'exe$ is now the full path of the executable.

'This code just chops off the filename to give us the directory:
{{Cl|FOR...NEXT|FOR}} i&amp; = {{Cl|LEN}}(exe$) {{Cl|TO}} 1 {{Cl|STEP}} -1
    {{Cl|IF...THEN|IF}} {{Cl|MID$}}(exe$, i&amp;, 1) = "/" {{Cl|THEN}} {{Cl|EXIT}} {{Cl|FOR...NEXT|FOR}}
{{Cl|NEXT}} i&amp;
directory$ = {{Cl|LEFT$}}(exe$, i&amp;)
path$ = directory$
{{Cl|END FUNCTION}} '' ''
{{CodeEnd}}{{small|Code by Johny B}}



&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How do I update the information in QB64 HELP?==

A: The help provided in the QB64 IDE Help System fetches the pages from this wiki. Use the '''Update current page''' in the [[IDE]] Help menu selection to update a page. Use the '''Update all pages''' choice to update them all, but this may take longer. In general you may want to update monthly or a week after a new version release.


&lt;center>[http://qb64.net/wiki/index.php?title=IDE#Help_Menu_.28Alt_.2B_H.29 QB64 IDE Help Menu]&lt;/center>

==Q: Can I use the same libraries with QB64 that I used with QB 4.5?==

A: If the libraries are pure QB 4.5 code then yes, otherwise no. QLB files are not supported but you can easily copy your favorite SUBs or FUNCTIONs to a text BI file and [[$INCLUDE]] them at the end of ANY program. Include them AFTER all SUB and FUNCTION code in the BAS file! 

As of Dec 3, 2010 QB64 acquired [[DECLARE LIBRARY]] to allow users to reference C, Windows, OpenGL and other DLL libraries. If you find some functions that you like please share them with us at the forum! The following pages list working functions our members have found and tested:

&lt;center>[[C Libraries]], [[DLL Libraries]], [[Windows Libraries]]&lt;/center>


*[[SDL Libraries]] ''(obsolete since version 1.000 - available here for historic purposes)

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: I can't get my QB 4.5 sourcecode to work in QB64! Why?==

A: Perhaps that is because QB64 isn't 100% compatible yet, it is a work in progress. It is around 95-98% compatible right now, and that is a large number! The commands that haven't been implemented are either obsolete or are too obscure and have been replaced by modern functionality. Look at the [http://www.qb64.net/forum/index.php?board=15.0 Unimplemented Qbasic Commands Forum] for statements that are not available.


&lt;p style="text-align: center">[[Keywords currently not supported by QB64]]&lt;/p>


'''Compiler errors''' are another subject. Always try to test the program in Qbasic BEFORE trying to run or compile it in QB64! You may find '''syntax or other code errors''' that the QB64 IDE may not find yet as a bonus! Always check the code before blaming QB64!


&lt;center>'''You may need Administrator rights to install or use QB64.'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: What files are required to run my QB64 compiled program in my Operating System?==
A: Programs compiled by QB64 (version 1.000 and up) are stand-alone so no external OpenGL DLL files are required to be with your program EXE file. 

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How are foreign languages and keyboards supported in QB64?==

A: As of version 0.922 (October 20, 2010) QB64 supports foreign language keyboard characters. 

* Setting up a typing language in the QB64 [[IDE]]:
:Step 1: In the OPTIONS menu select DISPLAY, then check the CUSTOM FONT check-box.
:Step 2: In the OPTIONS menu select LANGUAGE, then select a Code Page (CP850 for example) and click OK.

See the [[Unicode]] page to setup a language in a program you create. There are also links to the various [[Code Pages]] that are supported. Also there are four new keywords to work with keypresses and map them to ASCII key character codes: 

&lt;center>[[_KEYHIT]], [[_KEYDOWN]] and [[_MAPUNICODE]]&lt;/center>


&lt;center>'''You can now re-assign key codes to Unicode characters in programs you create using the [[_MAPUNICODE]] statement!'''&lt;/center>


If you have any problems, post in the discussion board. In the meantime you can use any of these recommended [[ASCII]] methods:


&lt;center>'''Using ASCII Characters'''&lt;/center>
Perhaps you can use the [[ASCII]] character codes. Go to the [[ASCII]] character chart and look  for the character(s) you need. If you find them, remember the code number and use either CHR$(code%) or the Alt-number pad key method to type them into literal strings(real strings with quotes) only. The following QB64 program displays the characters available on your PC:
{{CodeStart}}

SCREEN _NEWIMAGE(800, 600, 256)
font$ = "C:\WINDOWS\Fonts\cour.ttf" 'TTF file in Windows
style$ = "monospace" 'font style
f&amp; = _LOADFONT(font$, 22, style$)
_FONT f&amp;
COLOR 11
FOR c% = 1 TO 6: PRINT c%; CHR$(c%);: NEXT
FOR c% = 14 TO 27: PRINT c%; CHR$(c%);: NEXT
FOR c% = 32 TO 255: PRINT c%; CHR$(c%);: NEX
DO: SLEEP: LOOP UNTIL INKEY$ &lt;> ""

{{CodeEnd}}


'''The ALT Key Method:''' Hold the Alt key down and enter the code number using the Number Pad only. When you release the Alt key, the character should be in the IDE string you are making. Characters can be added (concatenated) using the + between the literal string and CHR$(code) or by using a semicolon as shown below: 

{{CodeStart}}

PRINT {{Cl|CHR$}}(165) + "ormally I don't use these keys. Do You " + {{Cl|CHR$}}(168) 'concatenation
    
PRINT {{Cl|CHR$}}(165); "ormally I don't use these keys. Do you"; {{Cl|CHR$}}(168)    'semicolons

PRINT "Ñormally I don't use these keys. Do you¿"             'Alt-number pad method

{{CodeEnd}}
{{OutputStart}}
Ñormally I don't use these keys. Do you¿
{{OutputEnd}}

:'''NOTE:''' You MUST use concatenation when defining a string variable using the CHR$ function character returns!

&lt;center>[[ASCII|Link to the ASCII Character Table]]&lt;/center>

To cut down on typing CHR$(???) all day, define often used characters as string variables such as Q$ = CHR$(34) as shown below:
{{CodeStart}}

{{Cl|DIM}} Q AS {{Cl|STRING}} * 1   'define as one byte string(get rid of $ type suffix too)
Q = {{Cl|CHR$}}(34)          'Q will now represent the elusive quotation mark in a string

PRINT "This string uses "; Q; "quotation marks"; Q; " that might cause a syntax error!"

{{CodeEnd}}
{{OutputStart}}
This string uses "quotation marks" that might cause a syntax error!
{{OutputEnd}}


:'''Warning! Do NOT use Notepad for special characters as it won't display them! It is best to enter them in the IDE.'''

You can use ANY of the ASCII characters to add borders, arrows, and many other characters not available on the keyboard. Hopefully this information will cure your problem!

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: MUST I copy or drag ALL of my program files to the QB64 folder?==

A: You can instruct QB64 to save the resulting executable file to the same folder as your source code file so that all your project files can reside in a separate folder, for better organization. In the [[IDE]] of versions 1.000 and up, go to the Run menu and tick the option "Save EXE in the source folder". This way, next time you hit F5, Ctrl+F5 or even F11, QB64 will compile your .BAS file and the .EXE will be placed in the same folder.


For older versions of QB64, you can use a batch file, as instructed below:

# Use a batch file or a command line as follows: QB64 -c ''yourfile.BAS''
# Move the compiled EXE file back to the folder with the program files.
# Copy ALL of the QB64 DLL files from the QB64 folder to your new program's folder.
# Try the EXE file to see how it works.


&lt;center>'''The Answer to the Question below will show you how to create a batch file and compile BAS files from ANY location.'''&lt;/center>

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Is there a way to use the compiler without running my program or using the IDE?==

A: Yes! No other program files besides the BAS file are required! Use the following command to compile a program without running it: 


* '''QB64 -c yourfile.BAS'''
* '''QB64 -x yourfile.BAS''' ''(compiles using the console only)''
* '''QB64 -c yourfile.BAS -o destination_path\destination executable_name.exe''' ''(compiles the .BAS file and outputs the executable to a separate folder)''


''NOTE: Versions of QB64 prior to 1.000 require that the DLL libraries are copied along with your executable or installed in the System folder (Windows).''


The batch file below can compile any BAS file from any location using drag and drop. The EXE will be created in the QB64 folder: 
{{TextStart}} '' ''
@ECHO OFF

Set QB64=%~dp0
Echo. QB64 path: %QB64%

REM The QB64 path must d
4000
esignate the drive letter when compiling from another drive letter!
C:
CD\
CD "%QB64%" 

cmd /c start /low QB64.exe -c %1 '' ''
{{TextEnd}}
&lt;center>'''Place the BAT file in the QB64 folder!''' You will also be able to drag and drop BAS files onto the batchfile.&lt;/center>



&lt;center> '''Associating the batch file in the Right Click Open With pop-up menu'''&lt;/center>
You can associate the batch file to the Right Click Popup Menu's ''Open With'' dialogue choices when you right click ANY BAS file: 

::::1) Right click any BAS file and move to ''Open With'' and click ''Choose Program'' in the pop-up menu.

::::2) Your batch file will not be in the program choices so select ''Browse''. 

::::3) Navigate to the batch file '''in the QB64 folder''' and click on it. 

::::4) '''Make sure that the ''Always use this program'' box is NOT checked!''' Then save your choice. 

&lt;center>The compiled EXE file can be found in the QB64 folder!&lt;/center>


&lt;center>'''You may need Administrator rights to install or use QB64.'''&lt;/center>

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How do I LINK modules or INCLUDE SUB procedures in QB64? ==

A: QB64 allows you to [[$INCLUDE]] code or BAS modules into one module when it is compiled. Text .BI files containing SUB or FUNCTION code or entire BAS modules can be included in one module that will be compiled. 

After the EXE is compiled, you do not have to even use the added code anymore! The EXE will contain ALL of the program code as ONE stand-alone program! This also allows you to add SUB code to ANY program that you desire. Use the following syntax and rules:


&lt;center>''Syntax:'' REM $INCLUDE: 'filename.BI'&lt;/center>


:1) '''$INCLUDE [[TYPE]] definitions or [[DATA]] field code''' at the beginning of the module that will be compiled. Text code can be used, but must be renamed to .BI (cannot be a .TXT extension!) or kept as a .BAS module. SUB or FUNCTION code MUST be included at the end of the module code!

:2) '''$INCLUDE [[SUB]] or [[FUNCTION]] code''' AFTER any SUB or FUNCTION code in the module that will be compiled to combine them. Otherwise QB64 will create an error stating that the INCLUDE statement cannot be placed there.

:3) '''LINKING''' of program modules is accomplished by creating a NEW module and using an $INCLUDE statement for each module that is to be combined.

After you have created the include files, you can add them to ANY other program that requires them! Thus you will end up with smaller BAS files and SUB procedures that can be used over and over like libraries. The files are only used during a compilation.


&lt;center>[[LINKed or Merged Modules|Program to Convert LINKed or Merged multiple module programs into one QB64 Module]]&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: CHAIN doesn't work the way I'm used to...==

A: CHAIN has been implemented in QB64 versions 0.851 up. Be sure to download the latest version of the compiler when available.

&lt;center>'''Note: QB64 will automatically compile the named BAS file if it does not find the EXE file.&lt;/center>

The statement also can use [[COMMON]] or [[COMMON SHARED]] to pass program information. However QB64 uses files to pass the information. If your program moves to a location other than the EXE file's location, the file may be inaccessable! To avoid this problem, make sure that your program can refer to that location using a path. 


There are minor differences from QBasic in that it doesn't open a program in the same window and does not retain the previous screen mode or format.

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Some screens look small. Can I enlarge them or make them fullscreen?==

* You can use the [[_FULLSCREEN]] statement to make your programs run fullscreen.
* [[$RESIZE]] can be added to a program so you can track window resize events. (version 1.000 and up)
* You can also create custom sized screens with page flipping and up to 32 bit colors using [[_NEWIMAGE]].
* Page flipping is available in most screens and the new [[_DISPLAY]] feature allows the images to be displayed when YOU desire.
* Picture or image files such as BMP, PNG, JPEG and GIF are EASY to load using [[_LOADIMAGE]].
* Once images are loaded, all you have to do is use the image handle with any of the new statements and functions.
* [[_PUTIMAGE]] GETs and PUTs images fast in ONE call. It can even stretch or compress the image sizes!


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Can I have background music as well as [[SOUND]], [[PLAY]] and [[BEEP]]?==

A: Yes, they are emulated to use the soundcard instead of the old boring monotone PC-speaker that is rapidly disappearing.

&lt;center>'''There also are a bunch of new sound capabilities that allow the use of WAV, OGG, MP3 files and more.'''&lt;/center>

Capabilities include:

# Multiple sound tracks
# Volume and speaker control
# Background music

&lt;center>'''SOUND HAS RETURNED TO QBASIC!'''&lt;/center>


&lt;center>'''Get started with [[_SNDOPEN|MUSIC]] NOW!&lt;/center>

[[_SNDCLOSE]] (statement), [[_SNDCOPY]] (function), [[_SNDGETPOS]] (function), [[_SNDLEN]] (function), [[_SNDLIMIT]] (statement)

[[_SNDLOOP]] (statement), [[_SNDOPEN]] (function), [[_SNDPAUSE]] (statement), [[_SNDPAUSED]] (function), [[_SNDPLAY]] (statement)

[[_SNDPLAYCOPY]] (statement), [[_SNDPLAYFILE]] (statement), [[_SNDPLAYING]] (function), [[_SNDSETPOS]] (statement) 

&lt;center>[[_SNDRAW]] (statement), [[_SNDSTOP]] (statement), [[_SNDVOL]] (statement)&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Can I use multiple monitors or Pole Monitors?==

A: Yes, program windows can be moved to them automatically using [[_SCREENMOVE]] with horizontal pixel values that are negative for a secondary monitor on the left and greater than the screen resolution for secondary monitors on the right.


'''Note:''' If [[_FULLSCREEN]] is used the program will appear in the primary monitor only. Other running program windows may be pushed onto a secondary monitor on the right so a secondary monitor on the left is preferable in those circumstances.



&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Why isn't the [[IDE]] always working as I would expect?==

A: The [[IDE]] has many features shared with modern IDEs while retaining the retro look reminiscent of QuickBasic 4.5 and QBasic. You may request new features in the Discussion subforum and they will be analyzed for implementation, although no warranty of being added is made.

You can also use QB64 as a compiler only, so that you can choose any alternate editor of your choice.

&lt;center>'''You may need Administrator rights to install or use QB64'''&lt;/center>


&lt;center>'''Alternate Editors:''' [[PSPAD|PSPad Editor for Windows]] and [[GEDIT|Gedit Editor for Linux]]'''&lt;/center>


&lt;center>[http://www.qb64.net/forum/index.php?board=21.0 Report missed Syntax Errors here!]&lt;/center>


&lt;center>'''[[Known QB64 Issues]]'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: If QB64 creates Basic programs why is there no Immediate Window?==


A: Because there is no '''QB64''' interpreter. All C code has to be compiled before it can be run, but you can run more than one instance.

'''QB64''' uses the Immediate window area to suggest syntax for keyword entries and give the compiler status when compiling. To run code snippets or do program calculations using QB64 just open up another instance of the [[IDE]]. Each new instance of QB64 will create a new numbered instance of Untitled(n).exe when compiled. If you want to save the test code for later use, Save it as a BAS file name before closing that instance of QB64. Ihe [[IDE]] will always ask if you want to save new or edited code.


Qbasic and Quickbasic allowed BAS programs to be run in an interpreter to test the code. The '''Run''' Menu in QB64 allows the following: 

{{TextStart}}'''{{text|S|white}}tart                    F5'''  Compiles into EXE file and runs program(with code whiteout). 
───────────────────────────
'''Start ({{text|D|white}}etached)    Ctrl+F5'''  Compiles into EXE and runs program separately (no code whiteout).
'''Make E{{text|X|white}}E Only           F11'''  Compiles into EXE without program files if there are no errors. '' ''
───────────────────────────
{{TextEnd}}{{small|Function keys compile without entering menu}}


&lt;center> White letters indicate CTRL + letter shortcuts when inside Run menu&lt;/center>


&lt;center>'''Associated text [[$INCLUDE]] code files, [[DECLARE LIBRARY|LIBRARY]] DLL files and C++ ''.h'' header files must be in the QB64 folder to compile.'''

In QB64 versions prior to 1.000 the provided DLL files need to be included with the program ''EXE'' after it is compiled.

(The compiler can find Windows DLL files in the System folder and C++ DLL files in the QB64 folder.)

'''No additional program files need to be in the QB64 folder to Make EXE Only!'''

The compiled EXE file can then be moved to a different folder holding the program files necessary when it is  run.&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How can I slow my program down and/or use less CPU resources?==

Not by using FOR loops! It would take a lot of loops just to slow QB64 down! Try [[_LIMIT]] to slow your program down and run at the same frame rate every loop. The integer value you enter determines the loop rate whether it is a [[DO...LOOP]] or a [[FOR...NEXT]] loop. 


[[_LIMIT]] also keeps the CPU memory usage lower when used correctly. Use Task Manager or another CPU manager to monitor the percentage of use if it is over 50% and it doesn't need to be. Some QB64 programs can take up over 90% of the memory needed!


Use [[SLEEP]] or [[INPUT$]] to wait for user entries, key presses or menu selections rather than using running [[INKEY$]] loops too.


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Can I resize the QB64 Editor([[IDE]])? ==

A: Yes, drag the window border to resize it or use the ''Alt + Enter'' key combination to switch from windowed to full screen mode. This can also be used to resize a QB64 program screen (see [[$RESIZE]]). 

There is also a way to set the window size in the ''Options'' Menu. Select ''Display'' and change the size from 80 columns and 25 rows to a '''larger''' size. The size '''cannot be less than 80 by 25!''' The size denotes the TEXT column and rows only! DO NOT MAKE IT TOO LARGE! 

If there is ever a problem with an OPTION that you set, just Delete the '''.\internal\temp\options.txt''' file. Then restart QB64. You can find the program listed in the taskbar. Right click and select ''Close'' from the pop-up menu.


&lt;center>'''See the [[IDE|IDE Page]] for more information.'''&lt;/center>

==Q: The autoformatting doesn't work correctly in the [[IDE]]...==

A: The autoformatting feature allows you to set a fixed number of spaces to indent your code. You can also choose to have keywords automatically changed to UPPERCASE as well as indenting the contents inside SUB/FUNCTION procedures. If you don't like the way it alters your code (both at load time and as you type it), just disable it.

&lt;center>'''Autoformatting and Updating can be turned off in the [[IDE]] using the [[IDE#Options_Menu_.28Alt_.2B_O.29:|Options Menu]]!&lt;/center>

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Does it work on Windows 98 or any OS older than Windows 2000?==

A: No, it doesn't. QB64 is made to run on new systems (WinXP and up, Linux and macOS). The .exe files produced by QB64 should work in Windows 98 as long as the required DLL libraries, if any, are supported on that system.

&lt;center>'''See the [[IDE|IDE Page]] for more information.'''&lt;/center>

==Q: Can Line Numbers be removed from older program code?==

A: Yes, you can use the Microsoft program below or the program on the following page to remove line numbers that are not required by Basic keywords such as [[GOTO]]. See: [[Line number|Removing line numbers]]


&lt;center>'''[ftp://ftp.microsoft.com/services/technet/windows/msdos/RESKIT/SUPPDISK/REMLINE.BAS Microsoft's REMLINE.BAS program removes unnecessary line numbers]'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Does QB64 support CURRENCY values from PDS or VB programs?==

A: Not directly, but [[_FLOAT]] currency values up to 4 decimal places can be multiplied by 10000(10 ^ 4) and converted to MKC$ string values using [[_MK$]] with an [[_INTEGER64]] value. [[_CV]] with an [[_INTEGER64]] value divided by 10000 converts it back to [[_FLOAT]] values.


[[PUT]] can write a PDS or VB, 8 byte currency string by multiplying the currency amount by 10000 and using an [[_INTEGER64]] variable.

[[GET]] can read a [[_FLOAT]] CURRENCY value as an [[INTEGER64]] variable value divided by 10000.

&lt;center>[[PDS(7.1)_Procedures#CURRENCY|See CURRENCY examples]]&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: What files are required to run older QB64 programs (version .954 and older) in Windows?==
A: Older versions of the QB64 compiler (.954 or older) and '''EVERY''' EXE file created by this version of the compiler are dependant on various DLL Library files to function properly. These files are found inside of the QB64 folder. This also explains why QB64 will create ALL EXE files in the QB64 folder no matter where the original BAS file is located on the computer. Your new program will require these files too, but you can move the DLL files to your shared SYSTEM32 folder to eliminate duplicates! 


'''Note:''' QB64 produces stand-alone executable files from version 1.000 onward.


&lt;center>'''Files required for executables created by older versions of QB64:'''&lt;/center>


&lt;center>''The list of library files you need to include with your program(s) as of July 2010:''&lt;/center>

{{TextStart}}

           jpeg.dll     libfreetype-6.dll     libgcc_s_sjlj-1.dll *(.95)   libogg-0.dll

     libpng12-0.dll       libstdc++-6.dll *(.95)    libtiff-3.dll       libvorbis-0.dll

libvorbisfile-3.dll               SDL.dll           SDL_image.dll         SDL_mixer.dll

        SDL_net.dll           SDL_ttf.dll               smpeg.dll             zlib1.dll


                         * denotes DLL updated in (version)
{{TextEnd}}

&lt;center>'''Other Important Files:'''&lt;/center>
{{TextStart}}                          cyberbit.ttf (12.7 MB v 0.92, October 2010)
{{TextEnd}}
&lt;center>'''NOTE:''' ''cyberbit.ttf'' file is a 12.7 megabyte font for rendering [[Unicode]] characters. Auto-update may be slow downloading this file!&lt;/center>
&lt;center>This font is NOT required to be included with a program as QB64 can use other fonts when necessary.&lt;/center>


&lt;center>It is suggested that frequent users copy the DLL files to the SYSTEM folder in Windows. The location should be: &lt;/center>
{{WhiteStart}}
                     ''C:\WINDOWS\SYSTEM32'' or ''C:\WINDOWS\[[SysWOW64]]'' 
{{WhiteEnd}}
This will allow all of your programs to run in any location without copies of the DLL files inside of every program folder. Administrator rights may be necessary to move them there! The '''DATA''' folder files are integrated into the compiler itself in versions .91 and above. 


&lt;center>'''You may need Administrator rights to install or use QB64.'''&lt;/center>


----


&lt;center>'''The DATA folder and its contents ARE NO LONGER REQUIRED as of the 8/21/2010 version .91!'''&lt;/center>

&lt;center> ''Files inside of the older version DATA folder.''&lt;/center>

{{TextStart}}
            charset8.raw  chrset16.raw  qb64.pal  qb64ega.pal  qb64icon '' ''
{{TextEnd}}
&lt;center>{{text|These files are no longer required and are no longer available except with older version downloads!|red}}&lt;/center>

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Do you provide changelogs?==

We do. Check below:

* [[Version .9 changelog]]
* [[Version 1.000 changel
4000
og]]
* [[Version 1.1 changelog]]

&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Does a User licence come with QB64?==

A: Yes, as of version 0.85 a licence comes with QB64 released as freeware. Read the licence.txt that comes with the download package for more information. QB64 will always be free to use with the current library files and the licenses DO NOT LIMIT the use of those libraries! You are also allowed to sell software that you create with the following stipulations:

{{TextStart}}                               '''QB64 SDL SOFTWARE LICENSE'''

QB64 is currently released as freeware meaning that this download may be copied/distributed 
free of charge. All rights to the programs you create using QB64 (in both their executable 
and source form) belong to you. '''You are under no obligation to release the source code to''' 
'''the programs you create. You can sell the programs you create for profit.''' You are under no 
obligation to acknowledge that the programs you create were written in QB64 or reference 
the QB64 website in any way.

The dynamically linked libraries (the DLL files you must include with your programs) are 
distributed under '''LGPL'''. Requirements for this can be found at the following URL: 

                        http://www.libsdl.org/license-lgpl.php

QB64 and QB64 programs dynamically link to SDL (Simple DirectMedia Layer) libraries. SDL
libraries are made available under the '''GNU Lesser General Public License (LGPL)'''. Details of 
the SDL license requirements can be found at the above URL.


Libraries are used in their 'standard'/unmodified versions and source code for these 
libraries can be found at: 

                              http://www.libsdl.org

The QB64 compiler generates C++ code which is compiled into executable form by the MINGW 
GCC compiler. QB64 uses a version of the MINGW &amp; GCC compilers found at the following URL:

                           http://www.drangon.org/mingw/

The official version of MINGW GCC compiler can be found at the following URL:  

                              http://www.mingw.org/ '' ''
{{TextEnd}}

:The choice of license makes a big difference: using the '''Lesser GPL''' permits use of the library in proprietary programs; using the ordinary GPL for a library makes it available only for free programs.


&lt;Center>'''QB64 GL License found in the License folder with other licenses:'''&lt;/center>
{{TextStart}}
                          '''IMPORTANT LICENSING NOTE FOR QB64 GL PROGRAMMERS'''
All executables which perform any kind of sound operation are subject to the LGPL license 
(due to incorporation of mpglibdll and OpenAL).
Other components are licensed under various permissive licences.
When sound components are included (thus the LGPL is in effect), the easiest way to meet 
terms of the LGPL is to make your program's source code (.BAS) available.
'''If you are not using sound components, you do not need to release the program's source.'''
'''If you are using fonts, you are bound by the terms of FreeType's license.''' Somewhere 
in your software package should include a notice that your program includes the FreeType 
library (see licence_freetype_ftl.txt for details)
'''In all cases, you should distribute the LICENSE folder with your program.'''

It should be noted that providing source code is not the only way to meet the conditions of 
the LGPL (eg dynamic linking) but it is by far the easiest from a technical point of view at 
this current time.


The license requirements for components of QB64 are as follows:

Software/Library Name: QB64 (inclusive of all parts of this distribution not covered by 
separate licence below)
Website(s): http://www.qb64.net, http://code.google.com/p/qb64/
License: LGPL with static linking of code required for generated programs to run permitted
License Website: http://www.gnu.org/licenses/licenses.html#LGPL
License File: license/lgpl_2_1.txt

Software/Library Name: MinGW 64
Website: http://mingw-w64.sourceforge.net/
License: (see below)
Each of the various packages, which is distributed by MinGW.org, is governed by its own 
individual copyright and licensing terms. In summary, for the most commonly deployed 
packages:
MinGW runtime: The MinGW base runtime package has been placed in the public domain, and 
is not governed by copyright. This basically means that you can do what you like with the 
code.w32api: You are free to use, modify and copy this package. No restrictions are imposed 
on programs or object files linked with this library. You may not restrict the the usage of 
this library. You may distribute this library as part of another package or as a modified 
package if, and only if, you do not restrict the usage of the portions consisting of this 
(optionally modified) library. If distributed as a modified package, then a copy of this 
notice must be included.
This library is distributed in the hope that it will be useful, but WITHOUT WARRANTY OF 
ANY KIND; without even the implied warranties of MERCHANTABILITY or of FITNESS FOR A 
PARTICULAR PURPOSE.
MinGW profiling code: MinGW profiling code is distributed under the terms of the GNU General 
Public License.
Binutils, GCC, GDB, GNU Make: All of the GNU development tools, such as GNU binutils, GCC, 
GDB and GNU Make, are governed by the terms of the GNU General Public License.
License Website: http://www.gnu.org/licenses/licenses.html#GPL
License File: license_gnu_gpl_3.txt
Location in QB64 distribution: internal/c/c_compiler/

Software/Library Name: Opus Tools
Website: http://www.opus-codec.org/
License: BSD 2-clause license
License Website: http://opensource.org/licenses/BSD-2-Clause
License File: license_opus.txt
Location in QB64 distribution: internal/c/parts/audio/conversion/
OpusInfo, which is under a GPL licence, was included in Opus Tools but has been removed 
from the QB64 distribution.

Software/Library Name: mpglibdll
Website(s):
http://www.rz.uni-frankfurt.de/~pesch
http://www.mpg123.de
http://www.sulaco.org/mp3
License: LGPL 2.1
License Website: http://www.gnu.org/licenses/licenses.html#LGPL
License File: license_gnu_lgpl_2_1.txt
Location in QB64 distribution: internal/c/parts/audio/decode/mp3/

Software/Library Name: Ogg Vorbis I audio decoder version 1.05
Website:http://nothings.org/stb_vorbis/
Date:Written in April 2007
Author:Sean Barrett, sponsored by RAD Game Tools
License: Placed in the public domain April 2007 by the author: no copyright is claimed, and 
you may use it for any purpose you like.
License Website: N/A - public domain
License File: license_stbvorbis.txt
Location in QB64 distribution: internal/c/parts/audio/decode/ogg/

Software/Library Name: OpenAL-soft
Website:http://kcat.strangesoft.net/openal.html
License: LGPL 2
License Website: http://www.gnu.org/licenses/licenses.html#LGPL
License File: license_gnu_lgpl_2.txt
Location in QB64 distribution: internal/c/parts/audio/out/

Software/Library Name: FreeGLUT
Website: http://freeglut.sourceforge.net/
License: LGPL (note: website states LGPL, license file is not a copy of GNU LGPL)
License Website: http://www.gnu.org/licenses/licenses.html#LGPL
License File: license_freeglut.txt
Location in QB64 distribution: internal/c/parts/core/

Software/Library Name: FreeTYPE
Website: http://www.freetype.org/
License: GPL or FreeTYPE's FTL (programs must abide by one of these licenses)
License Website(s): (see below)
http://www.freetype.org/license.html
http://www.gnu.org/licenses/licenses.html#GPL
License File(s): (see below)
license_freetype_ftl.txt
license_gnu_gpl_2.txt
Location in QB64 distribution: internal/c/parts/video/font/ttf/

Software/Library Name: NanoJPEG - KeyJ's Tiny Baseline JPEG Decoder
Author: Martin J. Fiedler &lt;martin.fiedler@gmx.net>
License: (refer to license file)
License File: nanojpeg_license.txt
Location in QB64 distribution: internal/c/parts/video/image/decode/jpg

Software/Library Name: NanoJPEG - KeyJ's Tiny Baseline JPEG Decoder
Author: Martin J. Fiedler &lt;martin.fiedler@gmx.net>
License: (refer to license file)
License File: license_nanojpeg.txt
Location in QB64 distribution: internal/c/parts/video/image/decode/jpg

Software/Library Name: LodePNG
License: (refer to license file)
License File: license_lodepng.txt
Location in QB64 distribution: internal/c/parts/video/image/decode/png
{{TextEnd}}


&lt;center> '''The creator of QB64 is NOT responsible for any damages or the intended use of the  software it creates!'''&lt;/center>

&lt;center>'''The user assumes all risk when they download or use the QB64 compiler!'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How can I find what caused a Compiler error?==

A: Compiler errors are often actually coding errors that both you and the IDE don't notice! Often it is a syntax error such as forgetting a quotation mark in a PRINT. Look for syntax errors too.

* You will find a script/batch file called '''recompile_win.bat''' (also '''recompile_osx.command''' or '''recompile_lnx.sh''', according to your operating system) inside the folder '''internal\temp''' (if you have more than one instance of the IDE open, look inside temp2, temp3, etc).
* Immediately after encountering a "C++ compilation failed" message, run this script to have a look at the error message returned by the gcc compiler. That usually helps track the issue.


----


''For versions of QB64 below .954, the best way to get a clue to the problem is to run the following batch file IMMEDIATELY AFTER a compilation failure: '''CODE UPDATED 1/4/2011'''''

&lt;center>'''{{text|It's a good idea to exclude "QB64.exe" from any real-time anti-virus scanning to prevent IDE Module Errors!|red}}'''&lt;/center>

&lt;center>'''Displays errors in a DOS Console window'''&lt;/center>
{{TextStart}} '' ''
@echo off
ECHO.
ECHO                       Diagnosing Latest Compilation Error
ECHO.
ECHO                                Please wait...
ECHO.

cd .\internal\c
.\bin\g -w -Wall -I.\i -I..\..\ -L.\l qbx.cpp libqbx.o -mwindows .\i686-w64-mingw32\lib\libimm32.a -lwinspool -lmingw32 -ln -lmix -limg -lttf -lmn -lSDL -o ..\..\test64.exe
cd ..\..

ECHO.
ECHO.
PAUSE '' ''
{{TextEnd}}
&lt;center>'''Note: Make sure that ''test64.exe'' is at the end of the long code line when copying!'''&lt;/center>


&lt;center>'''Places compiler errors into the ''0utput64.txt'' file'''&lt;/center>
{{TextStart}} '' ''
@echo off
ECHO.
ECHO                       Diagnosing Latest Compilation Error
ECHO.
ECHO                                Please wait...
ECHO.
cd .\internal\c
.\bin\g -w -Wall -I.\i -I..\..\ -L.\l qbx.cpp libqbx.o -mwindows .\i686-w64-mingw32\lib\libimm32.a -lwinspool -lmingw32 -ln -lmix -limg -lttf -lmn -lSDL -s -o ..\..\ >..\..\0utput64.txt 2>&amp;1
cd ..\..

ECHO.
ECHO                            0utput64.txt created!      
ECHO.
PAUSE '' ''
{{TextEnd}}
&lt;center>'''Note: Make sure that ''0utput64.txt 2>&amp;1'' is at the end of the long code line when copying!'''&lt;/center>


&lt;center>'''To create the Batch file, copy code above to Notepad and save it as ''QB64ERR.BAT''. Save as type: ''All Files''.'''&lt;/center>


Look for the word '''error''' in the resulting information. The errors often have to do with syntax or code errors not found by the [[IDE]].

&lt;center>'''Place the batch files into the QB64 folder to use.'''&lt;/center>


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: How do I use the QB64 code Repository?==

A: QB64 is open source freeware and all the codebase is freely available on GitHub at [https://github.com/Galleondragon/qb64 this link]. You can fork it, develop your own modified version of it and '''most importantly: help improve the official version by making pull requests.''' If you are already familiar with code collaboration, versioning control using git and would like to help, become involved! Your contributions could end up becoming part of the QB64 project.

&lt;!-- You can find a video tutorial here: [http://www.qb64.net/qb64_repository_tutorial.mp4 Repository Video Tutorial] -->


:: '''I cannot stress enough that the QB64 repository is not an official QB64 release! Even though our contributors are individually appointed, I'm not responsible for the contributions of these other authors which could potentially be malicious. '''

::'''Galleon'''


&lt;p style="text-align: center">([[#toc|Return to FAQ topics]])&lt;/p>

==Q: Where I can view the C++ code before it gets compiled==
Look in the QB64 '''internal\temp''' folder for '''main.txt''' to get the C code used to compile the latest program.

==Q: Where can I find information about a QB64 statement or function?==


&lt;center>'''[[Known QB64 Issues]]'''&lt;/center>


&lt;center>'''[http://www.qb64.net/forum/index.php QB64 Forum] ([[Forum Tips]])'''&lt;/center>


&lt;center>'''[http://qb64.net/wiki/index.php?title=QB64_Tutorials QB64 Tutorials]'''


[[Main_Page#Appendix:|Appendix of QB64 Procedures]]


[http://qb64.net/wiki/index.php?title=Main_Page#Appendix: Information about Programming concepts]&lt;/center>


&lt;p style="text-align: center">[[Keywords currently not supported by QB64]]&lt;/p>

&lt;center>[[Keywords_currently_not_supported_by_QB64#Keywords_Not_Supported_in_Linux_or_MAC_OSX_versions|Keywords Not Supported in Linux or MAC OSX versions]]&lt;/center>


{{PageNavigation}}
